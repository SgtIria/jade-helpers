//-
//- Form helper mixins
//-
//- 	Creates form elements (and so much more) from JS objects
//-
//- Inspiration:
//-
//-	http://pherricoxide.wordpress.com/2013/07/24/jade-mixins-blocks-attributes-and-more/
//-	Note on attributes: https://github.com/visionmedia/jade/issues/664
//-

//- This will render a div around whatever follows. NEAT!!!
mixin row(o)
	- attributes = o || attributes
	div.form-group(attributes)
		block

//- Standard label - span around the text in case there is a block
mixin label(text)
	label(attributes)
		if(text)
			span #{text}
		block

//-	Standard text box
mixin textBox(o)
	- attributes = helper.getFieldObject("text", o, attributes).attr
	input(attributes).form-control


//-	Standard check box
mixin checkBox(o)
	- attributes = helper.getFieldObject("checkbox", o, attributes).attr
	input(attributes)


//-	Checkbox on one line, with label after
mixin checkBoxLine(o)
	- var fObj = helper.getFieldObject("checkbox", o, attributes)
	.checkbox
		+label()
			+checkBox(fObj.attr)
			span #{fObj.meta.labelAfter}


//-	Standard radio box
mixin radioBox(o)
	- attributes = helper.getFieldObject("radio", o, attributes).attr
	input(attributes)


//-	Radio on one line, with label after
mixin radioBoxLine(o)
	- var fObj = helper.getFieldObject("radio", o, attributes)
	.radio
		+label()
			+radioBox(fObj.attr)
			span #{fObj.meta.labelAfter}

//- List of radio boxes, with labels after them
mixin radioBoxList(o)
	each item in o.options
		- item.name = item.name  || o.name
		.radio
			+label()
				+radioBox(item)
				span #{item.labelAfter || item.label}


//- TODO: Multiple and option groups
mixin selectBox(o)
	- attributes = helper.getFieldObject("select", o, attributes).attr
	- var options = helper.fieldOptions(o)
	select(attributes).form-control
		each obj in options
			//- Ensure we always have a value, even if it's empty string
			option(selected=obj.selected? "selected": undefined, value="#{obj.value? obj.value: obj.text? obj.text: ''}") #{obj.text}


//- A form row, showing standard layout for label and required indicator
//- TODO: Add error container for validation issues.
mixin formRow(o)
	- var fObj = helper.getFieldObject("", o, attributes)
	+row(class=fObj.meta.required? "required": undefined)
		+label(for="#{fObj.attr.id || fObj.attr.name}").col-sm-2.control-label
			span #{fObj.meta.label}
			span.requiredIndicator *
		div.col-sm-10
			block
			p.help-block #{fObj.meta.help? fObj.meta.help: ''}
